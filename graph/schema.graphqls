
type Advertisable {
  eid: String!
  accounts(talEID: String, tagEID: String): TalAccountSource
}

type Account {
  domain: String
}

type TalAccountSource {
  accounts: [Account]
}

# CompanyAttributes service
type FirstPartyCompanyAttributes {
  industry: String
}

type ThirdPartyCompanyAttributes {
  employees: Float
}

type CompanyAttributes {
  firstParty: FirstPartyCompanyAttributes
  thirdParty: ThirdPartyCompanyAttributes
}

extend type Account {
  companyAttributes: CompanyAttributes
}

type AttributesAccountSource {
  accounts: [Account]
}

input FirstPartyFilters {
  field: String
}

input ThirdPartyFilters {
  field: String
}

input DomainsFilter {
  domains: [String!]
  include: Boolean!
}

extend type TalAccountSource {
  accountsByAttributes(domains: DomainsFilter,  searchType: String, firstPartyFilters: FirstPartyFilters, thirdPartyFilters: ThirdPartyFilters): AttributesAccountSource
}

extend type IntentAccountSource {
  accountsByAttributes(domains: DomainsFilter,  searchType: String, firstPartyFilters: FirstPartyFilters, thirdPartyFilters: ThirdPartyFilters): AttributesAccountSource
}


# Intent Service
type IntentSurgeRecords {
  topic: String
}

extend type Account {
  surgeRecords: IntentSurgeRecords
}

type IntentAccountSource {
  accounts: [Account]
}

input IntentFilters {
  topics: [String!]
}

extend type TalAccountSource {
  accountsByIntent(domains: DomainsFilter, searchType: String, intentFilters: IntentFilters): IntentAccountSource
}

extend type AttributesAccountSource {
  accountsByIntent(domains: DomainsFilter, searchType: String, intentFilters: IntentFilters): IntentAccountSource
}

type Query {
  advertisable(eid: String!): Advertisable
}

# Account References Service
type AccountReferences {
  campaigns: [String]
}

extend type Account {
  references: AccountReferences
}